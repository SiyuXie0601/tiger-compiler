%{
#include <stdio.h>
#include "util.h"
#include "symbol.h" 
#include "errormsg.h"
#include "absyn.h"

extern int ERRMSG_tokPos;
int yylex(void); /* function prototype */
AST_exp absyn_root;
void yyerror(char *s)
{
 ERRMSG_error(ERRMSG_tokPos, "%s", s);
}

typedef struct list_s *list_t;
struct list_s
{
   union {
       int i;
       bool b;
       void *data;
   };
   struct list_s *next;
};

#define LVALUE_ACTION(target, prev, elem) \
    do \
    { \
        AST_var p, var = (elem); \
        (target) = p = (prev); \
        if (p) \
        { \
            while (p->u.field.var) \
                p = p->u.field.var; \
            p->u.field.var = var; \
        } \
        else \
            (target) = var; \
    } \
    while (0)

%}

%union {
  int pos;
  int ival;
  string sval;
  AST_exp exp ;
  SB_symbol sym;
  AST_var var;
  AST_expList explist ;
  AST_ty type_p;
  AST_namety name_type;
  AST_dec decl;
  AST_decList dec_List;
}


%token <sval> ID
%token <ival> INT
%token <sval> STRING

%type <exp> exp
%type <sym> id  
%type <var> lvalue lvalue_ext 
%type <explist> expseq expseq1  
%type <type_p> ty
%type <name_type> typedec
%type <dec_List> decs
%type <decl> vardec


%token 
  COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK 
  LBRACE RBRACE DOT 
  PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE
  AND OR ASSIGN
  ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF 
  VAR TYPE

%nonassoc OF
%nonassoc IF THEN WHILE DO FOR TO
%left ELSE
%nonassoc ASSIGN 
%left OR AND
%nonassoc EQ NEQ GT LT GE LE
%left PLUS MINUS 
%left TIMES DIVIDE

%start program

%%

program:	exp    {absyn_root=$1;}  


exp:      INT         	{$$ = AST_IntExp(ERRMSG_tokPos, $1); }               
        | STRING      	{$$ = AST_StringExp(ERRMSG_tokPos, $1);} 
	| lvalue        {$$ =  AST_VarExp(ERRMSG_tokPos,$1);}   
	| LPAREN expseq RPAREN  { $$ = AST_SeqExp(ERRMSG_tokPos,$2); }
	| MINUS exp 	{$$ = AST_OpExp(ERRMSG_tokPos,  AST_minusOp, AST_IntExp(ERRMSG_tokPos,0), $2);}
	| IF exp THEN exp { $$ = AST_IfExp(ERRMSG_tokPos, $2, $4, AST_NilExp(ERRMSG_tokPos) ); }
	| IF exp THEN exp ELSE exp { $$ = AST_IfExp(ERRMSG_tokPos, $2, $4, $6); }
	| WHILE exp DO exp { $$ = AST_WhileExp(ERRMSG_tokPos, $2, $4); }
	| FOR id ASSIGN exp TO exp DO exp  {$$ = AST_ForExp(ERRMSG_tokPos, $2, $4, $6, $8); }
	|  LET decs IN expseq END    { $$ = AST_LetExp(ERRMSG_tokPos, $2, AST_SeqExp(ERRMSG_tokPos,$4)); }
	|  id LBRACK exp RBRACK OF exp  {$$ = AST_ArrayExp(ERRMSG_tokPos, $1, $3, $6); }
	|  exp TIMES exp      { $$ = AST_OpExp(ERRMSG_tokPos, AST_timesOp, $1,$3); }            
  |  exp DIVIDE exp      { $$ = AST_OpExp(ERRMSG_tokPos,  AST_divideOp,$1, $3); }             
  |  exp PLUS exp       { $$ = AST_OpExp(ERRMSG_tokPos,  AST_plusOp,$1, $3); }              
  |  exp MINUS exp      { $$ = AST_OpExp(ERRMSG_tokPos,  AST_minusOp,$1, $3); }              
  |  exp EQ exp         { $$ = AST_OpExp(ERRMSG_tokPos,  AST_eqOp,$1, $3); }              
  |  exp NEQ exp        { $$ = AST_OpExp(ERRMSG_tokPos,  AST_neqOp,$1, $3); }              
  |  exp LT exp          { $$ = AST_OpExp(ERRMSG_tokPos,  AST_ltOp,$1, $3); }             
  |  exp LE exp          { $$ = AST_OpExp(ERRMSG_tokPos,  AST_leOp,$1, $3); }             
  |  exp GT exp          { $$ = AST_OpExp(ERRMSG_tokPos,  AST_gtOp,$1, $3); }             
  |  exp GE exp          { $$ = AST_OpExp(ERRMSG_tokPos,  AST_geOp,$1, $3); }             
  |  exp AND exp         { $$ = AST_IfExp(ERRMSG_tokPos,$1, $3, AST_IntExp(ERRMSG_tokPos, 0)); }         
  |  exp OR exp		{ $$ = AST_IfExp(ERRMSG_tokPos, $1, AST_IntExp(ERRMSG_tokPos, 1),$3); }
	|  lvalue ASSIGN exp   {
  $$ = AST_AssignExp(ERRMSG_tokPos, $1, $3); }

id: 
	ID {$$ = SB_Symbol($1); }

lvalue:
	id lvalue_ext   {   LVALUE_ACTION($$, $2, AST_SimpleVar(ERRMSG_tokPos, $1));  }

lvalue_ext:
	/* empty */ 	{ $$ = NULL; }
	|   LBRACK exp RBRACK lvalue_ext    { LVALUE_ACTION($$, $4, AST_SubscriptVar(ERRMSG_tokPos, NULL, $2)); }

expseq: 
	/*empty*/   { $$ = NULL; }                   
        | expseq1   { $$ = AST_ExpList($1->head,$1->tail);}                 

expseq1:
	exp        { $$ = AST_ExpList($1,NULL);}                   
        |  exp SEMICOLON expseq1  { $$ = AST_ExpList($1,$3);}

decs:	/* empty */		{ $$ = NULL; }
	|  typedec decs  	{ $$ = AST_DecList(AST_TypeDec(ERRMSG_tokPos, AST_NametyList($1,NULL)),$2); }
	|   vardec decs		{ $$ = AST_DecList($1,$2); }


vardec:    VAR id ASSIGN exp      { $$ = AST_VarDec(ERRMSG_tokPos, $2, NULL, $4); }     
    |  VAR id COLON id ASSIGN exp  {$$ = AST_VarDec(ERRMSG_tokPos, $2, $4, $6); }

typedec:   TYPE id EQ ty	{ $$ = AST_Namety($2, $4); }

ty:     ARRAY OF id 	 { $$ = AST_ArrayTy(ERRMSG_tokPos, $3); }
